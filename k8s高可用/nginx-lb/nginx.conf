user nginx;
worker_processes auto;
error_log /var/log/nginx/error.log;
pid /run/nginx.pid;

include /usr/share/nginx/modules/*.conf;

events {
    worker_connections 1024;
}

# 四层负载均衡，为三台Master kube-apiserver组件提供负载均衡
stream {

    log_format  main  '$remote_addr $upstream_addr - [$time_local] $status $upstream_bytes_sent';

    access_log  /var/log/nginx/k8s-access.log  main;

    upstream k8s-apiserver {
       server 192.168.56.101:6443;   # Master1 APISERVER IP:PORT
       server 192.168.56.102:6443;   # Master2 APISERVER IP:PORT
       server 192.168.56.103:6443;   # Master3 APISERVER IP:PORT
    }
    
    server {
       listen 6443; # 由于nginx与master节点复用，这个监听端口不能是6443，否则会冲突
       proxy_pass k8s-apiserver;
    }


}

http {
    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';

    access_log  /var/log/nginx/access.log  main;

    sendfile            on;
    tcp_nopush          on;
    tcp_nodelay         on;
    keepalive_timeout   65;
    types_hash_max_size 2048;

    include             /etc/nginx/mime.types;
    default_type        application/octet-stream;

    #为k8s-node1,k8s-node2,k8s-node3节点安装的ingress-nginx暴露的80,443端口做负载均衡
    upstream ingress-nginx-lb.com {
      
      server 192.168.56.104:80;   # k8s-node1
      server 192.168.56.105:80;   # k8s-node2
      server 192.168.56.109:80;   # k8s-node3

    }

    server {
        listen 80;
        location / {
        proxy_pass http://ingress-nginx-lb.com;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        }           
    }


   server {
	listen 443;
	ssl on;
	ssl_certificate testssl.crt;
	ssl_certificate_key testssl.key;
	location / {
	proxy_pass http://ingress-nginx-lb.com;
	proxy_set_header Host $host;
	proxy_set_header X-Real-IP $remote_addr;
	proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
	}
   }

}
